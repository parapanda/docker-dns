#!/usr/bin/env python
# coding=utf-8
"""
simple, automatic, self-contained dns server for docker
"""
from __future__ import print_function, unicode_literals

import argparse
import json
import logging
import os
import re
import signal
import sys
from _socket import gaierror
from collections import namedtuple
from functools import reduce

import docker
import gevent
import six
from dnslib import A, DNSHeader, DNSLabel, DNSRecord, QTYPE, RR
from future.moves.urllib import parse
from gevent import threading, monkey
from gevent.resolver_ares import Resolver
from gevent.server import DatagramServer

monkey.patch_all()

PROCESS_NAME = 'dockerdns'

logger = logging.getLogger(PROCESS_NAME)
logger.setLevel(logging.DEBUG)

ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

# noinspection SpellCheckingInspection

RE_VALID_NAME = re.compile(r'[^\w\d.-]')
RE_DNS_RECORD = re.compile(r'([a-zA-Z0-9_-]*):((?:[12]?[0-9]{1,2}\.){3}(?:[12]?[0-9]{1,2})$)')

Container = namedtuple('Container', 'id, name, running, address')


def get(d, *keys):
    return reduce(lambda d, k: d.get(k, {}), keys, d) or None


def contains(txt, *subs):
    return any(s in txt for s in subs)


class NameTable(object):
    """
    Table mapping names to addresses
    """

    @staticmethod
    def _key(name):
        # noinspection PyBroadException
        try:
            return DNSLabel(name.lower()).label
        except Exception:
            return None

    def __init__(self, records):
        self._storage = {}
        self._lock = threading.Lock()
        for record in records:
            self.add(record[0], record[1])

    def add(self, name, address):
        with self._lock:
            key = self._key(name)
            if not key:
                return
            logger.info('table.add %s -> %s', name, address)
            self._storage[key] = address

    def get(self, name):
        with self._lock:
            key = self._key(name)
            if not key:
                return
            result = self._storage.get(key)
            logger.info('table.get %s == %s', name, result)
            return result

    def rename(self, old_name, new_name):
        if not old_name or not new_name or old_name == new_name:
            return

        with self._lock:
            address = self._storage.get(old_name)
            if not address:
                return

            old_key = self._key(old_name)
            del self._storage[old_key]

            new_key = self._key(new_name)
            self._storage[new_key] = address

            logger.info('table.rename (%s -> %s) == %s', old_name, new_name, address)

    def remove(self, name):
        with self._lock:
            key = self._key(name)
            if not key:
                return

            if key in self._storage:
                logger.info('table.remove %s', name)
                del self._storage[key]


class DockerMonitor(object):
    """
    Reads events from Docker and updates the name table
    """

    def __init__(self, client, table, domain, network_name=None):
        self._docker = client
        self._table = table
        self._domain = domain.lstrip('.')
        self._network_name = network_name

    def run(self):
        # start the event poller, but don't read from the stream yet
        events = self._docker.events()

        # bootstrap by inspecting all running containers
        for container in self._docker.containers():
            if not self._network_name or container['HostConfig']['NetworkMode'] == self._network_name:
                for record in self._inspect(container['Id']):
                    if record.running:
                        self._table.add(record.name, record.address)

        # read the docker event stream and update the name table
        for event_json in events:
            event = json.loads(event_json)
            if event.get('Type', 'container') == 'container':
                container_id = event.get('id')
                if container_id:
                    status = event.get('status')
                    if status in {'start', 'die', 'rename'}:
                        # noinspection PyBroadException
                        try:
                            for record in self._inspect(container_id):
                                if status == 'start':
                                    self._table.add(record.name, record.address)

                                elif status == 'rename':
                                    old_name = get(event, 'Actor', 'Attributes', 'oldName')
                                    new_name = get(event, 'Actor', 'Attributes', 'name')
                                    old_name = '.'.join((old_name, self._domain))
                                    new_name = '.'.join((new_name, self._domain))
                                    self._table.rename(old_name, new_name)

                                elif status == 'die':
                                    self._table.remove(record.name)

                        except Exception:
                            logger.exception('failed to process event')

    def _get_names(self, name):
        names = [RE_VALID_NAME.sub('', name).rstrip('.')]
        return tuple(['.'.join((name, self._domain)) for name in names])

    def _inspect(self, container_id):
        """
        get full details on this container from docker
        :param container_id:
        :return:
        """

        record = self._docker.inspect_container(container_id)

        # ensure name is valid, and append our domain
        if container_id.startswith(record['Config']['Hostname']):
            name = get(record, 'Name').lstrip('/')
        else:
            name = record['Config']['Hostname']

        if not name:
            return ()

        record_id = get(record, 'Id')
        state = get(record, 'State', 'Running')

        ip_address = None
        if self._network_name:
            ip_address = get(record, 'NetworkSettings', 'Networks', self._network_name, 'IPAddress')

        if not ip_address:
            ip_address = get(record, 'NetworkSettings', 'IPAddress')

        return tuple([Container(record_id, name, state, ip_address) for name in self._get_names(name)])


class DnsServer(DatagramServer):
    """
    Answers DNS queries against the name table, falling back to the recursive
    resolver (if present).
    """

    def __init__(self, bind_address, table, dns_servers=None):
        DatagramServer.__init__(self, bind_address)
        self._table = table
        self._resolver = None
        if dns_servers:
            self._resolver = Resolver(
                servers=dns_servers,
                timeout=3.0,  # seconds
                tries=1,
            )

    def handle(self, data, peer):
        record = DNSRecord.parse(data)
        address = None
        authoritative = False
        if record.q.qtype in (QTYPE.A, QTYPE.AAAA, QTYPE.ANY):
            address = self._table.get(record.q.qname.idna())
            if address:
                authoritative = True
                if record.q.qtype == QTYPE.AAAA:
                    address = None
            else:
                address = self._resolve('.'.join(record.q.qname.label))

        self.socket.sendto(self._reply(record, authoritative, address), peer)

    def _reply(self, record, authoritative, address=None):
        reply = DNSRecord(
            DNSHeader(
                id=record.header.id,
                qr=1,
                aa=authoritative,
                ra=bool(self._resolver),
            ),
            q=record.q,
        )
        if address:
            reply.add_answer(RR(record.q.qname, QTYPE.A, rdata=A(address)))

        return reply.pack()

    def _resolve(self, name):
        if not self._resolver:
            return None

        try:
            return self._resolver.gethostbyname(name)
        except gaierror as e:
            if not contains(str(e), 'ETIMEOUT', 'ENOTFOUND'):
                logger.exception('failed to resolve entry: %s', name)


def stop(*servers):
    for server in servers:
        if server.started:
            server.stop()

    sys.exit(signal.SIGINT)


def split_record(record):
    match = RE_DNS_RECORD.match(record)
    if not match:
        logger.error('--record has invalid format, expects: `--record <host>:<ip>`')
        sys.exit(1)

    return match.group(1), match.group(2)


def parse_args():
    docker_url = os.environ.get('DOCKER_HOST') or 'unix:///docker.sock'

    parser = argparse.ArgumentParser(
        PROCESS_NAME,
        epilog='\n',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        '--docker',
        default=docker_url,
        help='Url to docker TCP/UNIX socket',
    )

    parser.add_argument(
        '--dns-bind',
        default='0.0.0.0:53',
        help='Bind address for DNS server',
    )

    parser.add_argument(
        '--domain',
        default='docker',
        help='Base domain name for registered services',
    )

    parser.add_argument(
        '--network',
        default='',
        help='Name of the docker network',
    )

    parser.add_argument(
        '--resolver',
        default=['8.8.8.8', '8.8.4.4'],
        nargs='*',
        help='Servers for recursive DNS resolution',
    )

    parser.add_argument(
        '--no-recursion',
        action='store_const',
        const=1,
        help='Disables recursive DNS queries',
    )

    parser.add_argument(
        '-r',
        '--record',
        nargs='*',
        default=[],
        help='Add a static record "name:host"',
    )

    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    url = parse.urlparse(args.docker)
    if url.scheme in ('unix', 'unix+http'):
        # check if the socket file exists
        if not os.path.exists(url.path):
            logger.error('unix socket %s does not exist', url.path)
            sys.exit(1)

    if args.record:
        args.record = six.moves.map(split_record, args.record)

    resolver = () if args.no_recursion else args.resolver
    table = NameTable([(k + '.' + args.domain, v) for (k, v) in args.record])
    monitor = DockerMonitor(docker.Client(args.docker, version='auto'), table, args.domain, args.network)
    dns = DnsServer(args.dns_bind, table, resolver)
    gevent.signal(signal.SIGINT, stop, dns)
    dns.start()
    gevent.wait([gevent.spawn(monitor.run)])
